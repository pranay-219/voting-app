name: Voting Application
on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:11.7
        env:
          POSTGRES_USER: ${{ secrets.PG_USER }}
          POSTGRES_PASSWORD: ${{ secrets.PG_PASSWORD }}
          POSTGRES_DB: ${{ vars.PG_DATABASE }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout Repository Code
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: npm ci

      - name: Run Unit Tests with Coverage
        run: npm test

      - name: Run the Application
        run: |
          npm install
          npx sequelize-cli db:drop
          npx sequelize-cli db:create
          npx sequelize-cli db:migrate
          PORT=3000 NODE_ENV=test npx ts-node src/index.ts &
          sleep 5

      - name: Run Integration Tests
        run: |
          npm install cypress cypress-json-results nyc
          npx nyc --reporter=text-summary npx cypress run
      - name: Send Success Notification
        if: success()
        run: |
          curl -H "Content-Type: application/json" \
                -d '{"content":"**Pipeline is Passed**"}' \
                ${{ secrets.DISCORD_WEBHOOK }}

      - name: Send Failure Notification
        if: failure()
        run: |
          curl -H "Content-Type: application/json" \
                -d '{"content":"**Pipeline is Failed**"}' \
                ${{ secrets.DISCORD_WEBHOOK }}
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: pranay
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
    - name: Deploy to ECS
      uses: imehedi/actions-awscli-v2@latest
      with:
        args: ecs update-service --cluster pranay-cluster --service pranays-service --force-new-deployment
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: "ap-southeast-2"